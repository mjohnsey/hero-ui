/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateSuperhero
 */
export interface CreateSuperhero {
    /**
     * 
     * @type {string}
     * @memberof CreateSuperhero
     */
    'name'?: string;
    /**
     * 
     * @type {SuperPower}
     * @memberof CreateSuperhero
     */
    'super_power'?: SuperPower;
    /**
     * 
     * @type {string}
     * @memberof CreateSuperhero
     */
    'hometown'?: string;
}
/**
 * 
 * @export
 * @interface GetHeroes
 */
export interface GetHeroes {
    /**
     * 
     * @type {Array<GetSuperhero>}
     * @memberof GetHeroes
     */
    'heroes': Array<GetSuperhero>;
}
/**
 * 
 * @export
 * @interface GetSuperhero
 */
export interface GetSuperhero {
    /**
     * 
     * @type {string}
     * @memberof GetSuperhero
     */
    'name'?: string;
    /**
     * 
     * @type {SuperPower}
     * @memberof GetSuperhero
     */
    'super_power'?: SuperPower;
    /**
     * 
     * @type {string}
     * @memberof GetSuperhero
     */
    'hometown'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetSuperhero
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface HealthResponse
 */
export interface HealthResponse {
    /**
     * 
     * @type {string}
     * @memberof HealthResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const SuperPower = {
    Flight: 'flight',
    SuperStrength: 'super-strength',
    SuperSpeed: 'super-speed',
    Gills: 'gills',
    Rich: 'rich',
    Levitation: 'levitation'
} as const;

export type SuperPower = typeof SuperPower[keyof typeof SuperPower];


/**
 * 
 * @export
 * @interface UpdateSuperhero
 */
export interface UpdateSuperhero {
    /**
     * 
     * @type {string}
     * @memberof UpdateSuperhero
     */
    'name'?: string;
    /**
     * 
     * @type {SuperPower}
     * @memberof UpdateSuperhero
     */
    'super_power'?: SuperPower;
    /**
     * 
     * @type {string}
     * @memberof UpdateSuperhero
     */
    'hometown'?: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthHealthGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthHealthGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthGet(options?: any): AxiosPromise<HealthResponse> {
            return localVarFp.healthHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthHealthGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HeroesApi - axios parameter creator
 * @export
 */
export const HeroesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Hero
         * @param {CreateSuperhero} createSuperhero 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHeroHeroesPost: async (createSuperhero: CreateSuperhero, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSuperhero' is not null or undefined
            assertParamExists('createHeroHeroesPost', 'createSuperhero', createSuperhero)
            const localVarPath = `/heroes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSuperhero, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Hero
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroHeroesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHeroHeroesIdGet', 'id', id)
            const localVarPath = `/heroes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Heroes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesHeroesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/heroes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Hero
         * @param {string} id 
         * @param {UpdateSuperhero} updateSuperhero 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHeroHeroesIdPut: async (id: string, updateSuperhero: UpdateSuperhero, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateHeroHeroesIdPut', 'id', id)
            // verify required parameter 'updateSuperhero' is not null or undefined
            assertParamExists('updateHeroHeroesIdPut', 'updateSuperhero', updateSuperhero)
            const localVarPath = `/heroes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSuperhero, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HeroesApi - functional programming interface
 * @export
 */
export const HeroesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HeroesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Hero
         * @param {CreateSuperhero} createSuperhero 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHeroHeroesPost(createSuperhero: CreateSuperhero, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSuperhero>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHeroHeroesPost(createSuperhero, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Hero
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroHeroesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSuperhero>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroHeroesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Heroes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeroesHeroesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHeroes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeroesHeroesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Hero
         * @param {string} id 
         * @param {UpdateSuperhero} updateSuperhero 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHeroHeroesIdPut(id: string, updateSuperhero: UpdateSuperhero, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSuperhero>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHeroHeroesIdPut(id, updateSuperhero, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HeroesApi - factory interface
 * @export
 */
export const HeroesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HeroesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Hero
         * @param {CreateSuperhero} createSuperhero 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHeroHeroesPost(createSuperhero: CreateSuperhero, options?: any): AxiosPromise<GetSuperhero> {
            return localVarFp.createHeroHeroesPost(createSuperhero, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Hero
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroHeroesIdGet(id: string, options?: any): AxiosPromise<GetSuperhero> {
            return localVarFp.getHeroHeroesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Heroes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeroesHeroesGet(options?: any): AxiosPromise<GetHeroes> {
            return localVarFp.getHeroesHeroesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Hero
         * @param {string} id 
         * @param {UpdateSuperhero} updateSuperhero 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHeroHeroesIdPut(id: string, updateSuperhero: UpdateSuperhero, options?: any): AxiosPromise<GetSuperhero> {
            return localVarFp.updateHeroHeroesIdPut(id, updateSuperhero, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HeroesApi - object-oriented interface
 * @export
 * @class HeroesApi
 * @extends {BaseAPI}
 */
export class HeroesApi extends BaseAPI {
    /**
     * 
     * @summary Create Hero
     * @param {CreateSuperhero} createSuperhero 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroesApi
     */
    public createHeroHeroesPost(createSuperhero: CreateSuperhero, options?: AxiosRequestConfig) {
        return HeroesApiFp(this.configuration).createHeroHeroesPost(createSuperhero, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Hero
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroesApi
     */
    public getHeroHeroesIdGet(id: string, options?: AxiosRequestConfig) {
        return HeroesApiFp(this.configuration).getHeroHeroesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Heroes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroesApi
     */
    public getHeroesHeroesGet(options?: AxiosRequestConfig) {
        return HeroesApiFp(this.configuration).getHeroesHeroesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Hero
     * @param {string} id 
     * @param {UpdateSuperhero} updateSuperhero 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeroesApi
     */
    public updateHeroHeroesIdPut(id: string, updateSuperhero: UpdateSuperhero, options?: AxiosRequestConfig) {
        return HeroesApiFp(this.configuration).updateHeroHeroesIdPut(id, updateSuperhero, options).then((request) => request(this.axios, this.basePath));
    }
}


